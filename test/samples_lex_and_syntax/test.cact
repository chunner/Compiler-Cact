const int c1 = 42;
int g = 1;
int arr[2][3] = {{1, 2, 3}, {4, 5, 6}};

int add(int a, int b) {
    return a + b;
}

int get_arr_val(int x[2][3], int i, int j) {
    return x[i][j];
}

int fact(int n) {
    if (n <= 1) {
        return 1;
    }
    return n * fact(n - 1);
}

int shadow(int g) {
    return g + 10;
}

void print_arr() {
    int i = 0, j = 0;
    while (i < 2) {
        j = 0;
        while (j < 3) {
            int tmp = arr[i][j];
            j = j + 1;
        }
        i = i + 1;
    }
}

void test_scope() {
    int x = 10;
    {
        int x = 20;  // should shadow outer x
        x = x + 1;
    }
}

int main() {
    int a = 5;
    int b = 10;
    int c = add(a, b);
    int d = fact(4);          // recursion
    int e = get_arr_val(arr, 1, 2);  // access arr[1][2] = 6
    print_arr();              // loop test
    test_scope();             // nested scope
    int result = shadow(3);   // symbol shadowing
    return result + c1 + c + d + e;  // test const/global/add/call
}
