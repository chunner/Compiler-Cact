
    #include <vector>


// Generated from Cact.g4 by ANTLR 4.13.1


#include "CactLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct CactLexerStaticData final {
  CactLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CactLexerStaticData(const CactLexerStaticData&) = delete;
  CactLexerStaticData(CactLexerStaticData&&) = delete;
  CactLexerStaticData& operator=(const CactLexerStaticData&) = delete;
  CactLexerStaticData& operator=(CactLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cactlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
CactLexerStaticData *cactlexerLexerStaticData = nullptr;

void cactlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (cactlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(cactlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CactLexerStaticData>(
    std::vector<std::string>{
      "CONST_KW", "INT_KW", "DOUBLE_KW", "CHAR_KW", "FLOAT_KW", "BOOL_KW", 
      "VOID_KW", "IF_KW", "ELSE_KW", "WHILE_KW", "BREAK_KW", "CONTINUE_KW", 
      "RETURN_KW", "FALSE", "TRUE", "IDENT", "DECIMAL_CONST", "OCTAL_CONST", 
      "HEXADECIMAL_CONST", "FloatConst", "EXPONENT", "HexFloat", "CharConst", 
      "STRING", "REGULAR_CHAR", "ESC", "PLUS", "MINUS", "NOT", "MUL", "DIV", 
      "MOD", "ASSIGN", "EQ", "NEQ", "GT", "LT", "GE", "LE", "AND", "OR", 
      "L_PAREN", "R_PAREN", "L_BRACE", "R_BRACE", "L_BRACKET", "R_BRACKET", 
      "COMMA", "SEMICOLON", "DOUBLE_QUOTE", "WS", "LineComment", "BlockComment"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'const'", "'int'", "'double'", "'char'", "'float'", "'bool'", 
      "'void'", "'if'", "'else'", "'while'", "'break'", "'continue'", "'return'", 
      "'false'", "'true'", "", "", "", "", "", "", "", "", "", "'+'", "'-'", 
      "'!'", "'*'", "'/'", "'%'", "'='", "'=='", "'!='", "'>'", "'<'", "'>='", 
      "'<='", "'&&'", "'||'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
      "','", "';'", "'\"'"
    },
    std::vector<std::string>{
      "", "CONST_KW", "INT_KW", "DOUBLE_KW", "CHAR_KW", "FLOAT_KW", "BOOL_KW", 
      "VOID_KW", "IF_KW", "ELSE_KW", "WHILE_KW", "BREAK_KW", "CONTINUE_KW", 
      "RETURN_KW", "FALSE", "TRUE", "IDENT", "DECIMAL_CONST", "OCTAL_CONST", 
      "HEXADECIMAL_CONST", "FloatConst", "EXPONENT", "HexFloat", "CharConst", 
      "STRING", "PLUS", "MINUS", "NOT", "MUL", "DIV", "MOD", "ASSIGN", "EQ", 
      "NEQ", "GT", "LT", "GE", "LE", "AND", "OR", "L_PAREN", "R_PAREN", 
      "L_BRACE", "R_BRACE", "L_BRACKET", "R_BRACKET", "COMMA", "SEMICOLON", 
      "DOUBLE_QUOTE", "WS", "LineComment", "BlockComment"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,51,420,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,
  	1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,
  	1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,
  	8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,
  	1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,
  	1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
  	5,15,195,8,15,10,15,12,15,198,9,15,1,16,1,16,5,16,202,8,16,10,16,12,16,
  	205,9,16,1,17,1,17,5,17,209,8,17,10,17,12,17,212,9,17,1,18,1,18,1,18,
  	1,18,3,18,218,8,18,1,18,4,18,221,8,18,11,18,12,18,222,1,19,5,19,226,8,
  	19,10,19,12,19,229,9,19,1,19,1,19,4,19,233,8,19,11,19,12,19,234,1,19,
  	3,19,238,8,19,1,19,4,19,241,8,19,11,19,12,19,242,1,19,1,19,5,19,247,8,
  	19,10,19,12,19,250,9,19,1,19,3,19,253,8,19,3,19,255,8,19,1,20,1,20,3,
  	20,259,8,20,1,20,1,20,3,20,263,8,20,1,20,4,20,266,8,20,11,20,12,20,267,
  	1,20,3,20,271,8,20,1,21,1,21,1,21,1,21,3,21,277,8,21,1,21,5,21,280,8,
  	21,10,21,12,21,283,9,21,1,21,1,21,5,21,287,8,21,10,21,12,21,290,9,21,
  	1,21,1,21,3,21,294,8,21,1,21,4,21,297,8,21,11,21,12,21,298,1,21,3,21,
  	302,8,21,1,22,1,22,1,22,1,22,1,23,1,23,5,23,310,8,23,10,23,12,23,313,
  	9,23,1,23,1,23,1,24,1,24,3,24,319,8,24,1,25,1,25,1,25,1,25,1,25,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,25,3,25,333,8,25,1,26,1,26,1,27,1,27,1,28,
  	1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,
  	1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,
  	1,40,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,
  	1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,4,50,390,8,50,11,50,12,50,391,
  	1,50,1,50,1,51,1,51,1,51,1,51,5,51,400,8,51,10,51,12,51,403,9,51,1,51,
  	1,51,1,52,1,52,1,52,1,52,5,52,411,8,52,10,52,12,52,414,9,52,1,52,1,52,
  	1,52,1,52,1,52,2,311,412,0,53,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
  	19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
  	21,43,22,45,23,47,24,49,0,51,0,53,25,55,26,57,27,59,28,61,29,63,30,65,
  	31,67,32,69,33,71,34,73,35,75,36,77,37,79,38,81,39,83,40,85,41,87,42,
  	89,43,91,44,93,45,95,46,97,47,99,48,101,49,103,50,105,51,1,0,12,3,0,65,
  	90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,49,57,1,0,48,57,1,0,
  	48,55,3,0,48,57,65,70,97,102,2,0,70,70,102,102,2,0,69,69,101,101,2,0,
  	43,43,45,45,2,0,80,80,112,112,3,0,9,10,13,13,32,32,2,0,10,10,13,13,449,
  	0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
  	0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
  	0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
  	1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
  	0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
  	0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
  	1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,
  	0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,
  	0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
  	1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,1,107,1,0,0,0,3,113,1,0,0,0,5,117,
  	1,0,0,0,7,124,1,0,0,0,9,129,1,0,0,0,11,135,1,0,0,0,13,140,1,0,0,0,15,
  	145,1,0,0,0,17,148,1,0,0,0,19,153,1,0,0,0,21,159,1,0,0,0,23,165,1,0,0,
  	0,25,174,1,0,0,0,27,181,1,0,0,0,29,187,1,0,0,0,31,192,1,0,0,0,33,199,
  	1,0,0,0,35,206,1,0,0,0,37,217,1,0,0,0,39,254,1,0,0,0,41,258,1,0,0,0,43,
  	276,1,0,0,0,45,303,1,0,0,0,47,307,1,0,0,0,49,318,1,0,0,0,51,332,1,0,0,
  	0,53,334,1,0,0,0,55,336,1,0,0,0,57,338,1,0,0,0,59,340,1,0,0,0,61,342,
  	1,0,0,0,63,344,1,0,0,0,65,346,1,0,0,0,67,348,1,0,0,0,69,351,1,0,0,0,71,
  	354,1,0,0,0,73,356,1,0,0,0,75,358,1,0,0,0,77,361,1,0,0,0,79,364,1,0,0,
  	0,81,367,1,0,0,0,83,370,1,0,0,0,85,372,1,0,0,0,87,374,1,0,0,0,89,376,
  	1,0,0,0,91,378,1,0,0,0,93,380,1,0,0,0,95,382,1,0,0,0,97,384,1,0,0,0,99,
  	386,1,0,0,0,101,389,1,0,0,0,103,395,1,0,0,0,105,406,1,0,0,0,107,108,5,
  	99,0,0,108,109,5,111,0,0,109,110,5,110,0,0,110,111,5,115,0,0,111,112,
  	5,116,0,0,112,2,1,0,0,0,113,114,5,105,0,0,114,115,5,110,0,0,115,116,5,
  	116,0,0,116,4,1,0,0,0,117,118,5,100,0,0,118,119,5,111,0,0,119,120,5,117,
  	0,0,120,121,5,98,0,0,121,122,5,108,0,0,122,123,5,101,0,0,123,6,1,0,0,
  	0,124,125,5,99,0,0,125,126,5,104,0,0,126,127,5,97,0,0,127,128,5,114,0,
  	0,128,8,1,0,0,0,129,130,5,102,0,0,130,131,5,108,0,0,131,132,5,111,0,0,
  	132,133,5,97,0,0,133,134,5,116,0,0,134,10,1,0,0,0,135,136,5,98,0,0,136,
  	137,5,111,0,0,137,138,5,111,0,0,138,139,5,108,0,0,139,12,1,0,0,0,140,
  	141,5,118,0,0,141,142,5,111,0,0,142,143,5,105,0,0,143,144,5,100,0,0,144,
  	14,1,0,0,0,145,146,5,105,0,0,146,147,5,102,0,0,147,16,1,0,0,0,148,149,
  	5,101,0,0,149,150,5,108,0,0,150,151,5,115,0,0,151,152,5,101,0,0,152,18,
  	1,0,0,0,153,154,5,119,0,0,154,155,5,104,0,0,155,156,5,105,0,0,156,157,
  	5,108,0,0,157,158,5,101,0,0,158,20,1,0,0,0,159,160,5,98,0,0,160,161,5,
  	114,0,0,161,162,5,101,0,0,162,163,5,97,0,0,163,164,5,107,0,0,164,22,1,
  	0,0,0,165,166,5,99,0,0,166,167,5,111,0,0,167,168,5,110,0,0,168,169,5,
  	116,0,0,169,170,5,105,0,0,170,171,5,110,0,0,171,172,5,117,0,0,172,173,
  	5,101,0,0,173,24,1,0,0,0,174,175,5,114,0,0,175,176,5,101,0,0,176,177,
  	5,116,0,0,177,178,5,117,0,0,178,179,5,114,0,0,179,180,5,110,0,0,180,26,
  	1,0,0,0,181,182,5,102,0,0,182,183,5,97,0,0,183,184,5,108,0,0,184,185,
  	5,115,0,0,185,186,5,101,0,0,186,28,1,0,0,0,187,188,5,116,0,0,188,189,
  	5,114,0,0,189,190,5,117,0,0,190,191,5,101,0,0,191,30,1,0,0,0,192,196,
  	7,0,0,0,193,195,7,1,0,0,194,193,1,0,0,0,195,198,1,0,0,0,196,194,1,0,0,
  	0,196,197,1,0,0,0,197,32,1,0,0,0,198,196,1,0,0,0,199,203,7,2,0,0,200,
  	202,7,3,0,0,201,200,1,0,0,0,202,205,1,0,0,0,203,201,1,0,0,0,203,204,1,
  	0,0,0,204,34,1,0,0,0,205,203,1,0,0,0,206,210,5,48,0,0,207,209,7,4,0,0,
  	208,207,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,36,
  	1,0,0,0,212,210,1,0,0,0,213,214,5,48,0,0,214,218,5,120,0,0,215,216,5,
  	48,0,0,216,218,5,88,0,0,217,213,1,0,0,0,217,215,1,0,0,0,218,220,1,0,0,
  	0,219,221,7,5,0,0,220,219,1,0,0,0,221,222,1,0,0,0,222,220,1,0,0,0,222,
  	223,1,0,0,0,223,38,1,0,0,0,224,226,7,3,0,0,225,224,1,0,0,0,226,229,1,
  	0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,230,1,0,0,0,229,227,1,0,0,0,
  	230,232,5,46,0,0,231,233,7,3,0,0,232,231,1,0,0,0,233,234,1,0,0,0,234,
  	232,1,0,0,0,234,235,1,0,0,0,235,237,1,0,0,0,236,238,7,6,0,0,237,236,1,
  	0,0,0,237,238,1,0,0,0,238,255,1,0,0,0,239,241,7,3,0,0,240,239,1,0,0,0,
  	241,242,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,244,1,0,0,0,244,248,
  	5,46,0,0,245,247,7,3,0,0,246,245,1,0,0,0,247,250,1,0,0,0,248,246,1,0,
  	0,0,248,249,1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,251,253,7,6,0,0,252,
  	251,1,0,0,0,252,253,1,0,0,0,253,255,1,0,0,0,254,227,1,0,0,0,254,240,1,
  	0,0,0,255,40,1,0,0,0,256,259,3,39,19,0,257,259,3,33,16,0,258,256,1,0,
  	0,0,258,257,1,0,0,0,259,260,1,0,0,0,260,262,7,7,0,0,261,263,7,8,0,0,262,
  	261,1,0,0,0,262,263,1,0,0,0,263,265,1,0,0,0,264,266,7,3,0,0,265,264,1,
  	0,0,0,266,267,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,270,1,0,0,0,
  	269,271,7,6,0,0,270,269,1,0,0,0,270,271,1,0,0,0,271,42,1,0,0,0,272,273,
  	5,48,0,0,273,277,5,120,0,0,274,275,5,48,0,0,275,277,5,88,0,0,276,272,
  	1,0,0,0,276,274,1,0,0,0,277,281,1,0,0,0,278,280,7,5,0,0,279,278,1,0,0,
  	0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,284,1,0,0,0,283,
  	281,1,0,0,0,284,288,5,46,0,0,285,287,7,5,0,0,286,285,1,0,0,0,287,290,
  	1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,291,1,0,0,0,290,288,1,0,0,
  	0,291,293,7,9,0,0,292,294,7,8,0,0,293,292,1,0,0,0,293,294,1,0,0,0,294,
  	296,1,0,0,0,295,297,7,3,0,0,296,295,1,0,0,0,297,298,1,0,0,0,298,296,1,
  	0,0,0,298,299,1,0,0,0,299,301,1,0,0,0,300,302,7,6,0,0,301,300,1,0,0,0,
  	301,302,1,0,0,0,302,44,1,0,0,0,303,304,5,39,0,0,304,305,3,49,24,0,305,
  	306,5,39,0,0,306,46,1,0,0,0,307,311,3,99,49,0,308,310,3,49,24,0,309,308,
  	1,0,0,0,310,313,1,0,0,0,311,312,1,0,0,0,311,309,1,0,0,0,312,314,1,0,0,
  	0,313,311,1,0,0,0,314,315,3,99,49,0,315,48,1,0,0,0,316,319,3,51,25,0,
  	317,319,9,0,0,0,318,316,1,0,0,0,318,317,1,0,0,0,319,50,1,0,0,0,320,321,
  	5,92,0,0,321,333,5,110,0,0,322,323,5,92,0,0,323,333,5,116,0,0,324,325,
  	5,92,0,0,325,333,5,39,0,0,326,327,5,92,0,0,327,333,5,34,0,0,328,329,5,
  	92,0,0,329,333,5,92,0,0,330,331,5,92,0,0,331,333,5,48,0,0,332,320,1,0,
  	0,0,332,322,1,0,0,0,332,324,1,0,0,0,332,326,1,0,0,0,332,328,1,0,0,0,332,
  	330,1,0,0,0,333,52,1,0,0,0,334,335,5,43,0,0,335,54,1,0,0,0,336,337,5,
  	45,0,0,337,56,1,0,0,0,338,339,5,33,0,0,339,58,1,0,0,0,340,341,5,42,0,
  	0,341,60,1,0,0,0,342,343,5,47,0,0,343,62,1,0,0,0,344,345,5,37,0,0,345,
  	64,1,0,0,0,346,347,5,61,0,0,347,66,1,0,0,0,348,349,5,61,0,0,349,350,5,
  	61,0,0,350,68,1,0,0,0,351,352,5,33,0,0,352,353,5,61,0,0,353,70,1,0,0,
  	0,354,355,5,62,0,0,355,72,1,0,0,0,356,357,5,60,0,0,357,74,1,0,0,0,358,
  	359,5,62,0,0,359,360,5,61,0,0,360,76,1,0,0,0,361,362,5,60,0,0,362,363,
  	5,61,0,0,363,78,1,0,0,0,364,365,5,38,0,0,365,366,5,38,0,0,366,80,1,0,
  	0,0,367,368,5,124,0,0,368,369,5,124,0,0,369,82,1,0,0,0,370,371,5,40,0,
  	0,371,84,1,0,0,0,372,373,5,41,0,0,373,86,1,0,0,0,374,375,5,123,0,0,375,
  	88,1,0,0,0,376,377,5,125,0,0,377,90,1,0,0,0,378,379,5,91,0,0,379,92,1,
  	0,0,0,380,381,5,93,0,0,381,94,1,0,0,0,382,383,5,44,0,0,383,96,1,0,0,0,
  	384,385,5,59,0,0,385,98,1,0,0,0,386,387,5,34,0,0,387,100,1,0,0,0,388,
  	390,7,10,0,0,389,388,1,0,0,0,390,391,1,0,0,0,391,389,1,0,0,0,391,392,
  	1,0,0,0,392,393,1,0,0,0,393,394,6,50,0,0,394,102,1,0,0,0,395,396,5,47,
  	0,0,396,397,5,47,0,0,397,401,1,0,0,0,398,400,8,11,0,0,399,398,1,0,0,0,
  	400,403,1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,404,1,0,0,0,403,401,
  	1,0,0,0,404,405,6,51,0,0,405,104,1,0,0,0,406,407,5,47,0,0,407,408,5,42,
  	0,0,408,412,1,0,0,0,409,411,9,0,0,0,410,409,1,0,0,0,411,414,1,0,0,0,412,
  	413,1,0,0,0,412,410,1,0,0,0,413,415,1,0,0,0,414,412,1,0,0,0,415,416,5,
  	42,0,0,416,417,5,47,0,0,417,418,1,0,0,0,418,419,6,52,0,0,419,106,1,0,
  	0,0,29,0,196,203,210,217,222,227,234,237,242,248,252,254,258,262,267,
  	270,276,281,288,293,298,301,311,318,332,391,401,412,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cactlexerLexerStaticData = staticData.release();
}

}

CactLexer::CactLexer(CharStream *input) : Lexer(input) {
  CactLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *cactlexerLexerStaticData->atn, cactlexerLexerStaticData->decisionToDFA, cactlexerLexerStaticData->sharedContextCache);
}

CactLexer::~CactLexer() {
  delete _interpreter;
}

std::string CactLexer::getGrammarFileName() const {
  return "Cact.g4";
}

const std::vector<std::string>& CactLexer::getRuleNames() const {
  return cactlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& CactLexer::getChannelNames() const {
  return cactlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& CactLexer::getModeNames() const {
  return cactlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& CactLexer::getVocabulary() const {
  return cactlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CactLexer::getSerializedATN() const {
  return cactlexerLexerStaticData->serializedATN;
}

const atn::ATN& CactLexer::getATN() const {
  return *cactlexerLexerStaticData->atn;
}




void CactLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  cactlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(cactlexerLexerOnceFlag, cactlexerLexerInitialize);
#endif
}
