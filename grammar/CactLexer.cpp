
    #include <vector>


// Generated from Cact.g4 by ANTLR 4.13.1


#include "CactLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct CactLexerStaticData final {
  CactLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CactLexerStaticData(const CactLexerStaticData&) = delete;
  CactLexerStaticData(CactLexerStaticData&&) = delete;
  CactLexerStaticData& operator=(const CactLexerStaticData&) = delete;
  CactLexerStaticData& operator=(CactLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cactlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
CactLexerStaticData *cactlexerLexerStaticData = nullptr;

void cactlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (cactlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(cactlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CactLexerStaticData>(
    std::vector<std::string>{
      "CONST_KW", "INT_KW", "DOUBLE_KW", "CHAR_KW", "FLOAT_KW", "VOID_KW", 
      "IF_KW", "ELSE_KW", "WHILE_KW", "BREAK_KW", "CONTINUE_KW", "RETURN_KW", 
      "IDENT", "DECIMAL_CONST", "OCTAL_CONST", "HEXADECIMAL_CONST", "FloatConst", 
      "CharConst", "STRING", "REGULAR_CHAR", "ESC", "PLUS", "MINUS", "NOT", 
      "MUL", "DIV", "MOD", "ASSIGN", "EQ", "NEQ", "GT", "LT", "GE", "LE", 
      "AND", "OR", "L_PAREN", "R_PAREN", "L_BRACE", "R_BRACE", "L_BRACKET", 
      "R_BRACKET", "COMMA", "SEMICOLON", "DOUBLE_QUOTE", "WS", "LineComment", 
      "BlockComment"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'const'", "'int'", "'double'", "'char'", "'float'", "'void'", 
      "'if'", "'else'", "'while'", "'break'", "'continue'", "'return'", 
      "", "", "", "", "", "", "", "'+'", "'-'", "'!'", "'*'", "'/'", "'%'", 
      "'='", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'&&'", "'||'", 
      "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "';'", "'\"'"
    },
    std::vector<std::string>{
      "", "CONST_KW", "INT_KW", "DOUBLE_KW", "CHAR_KW", "FLOAT_KW", "VOID_KW", 
      "IF_KW", "ELSE_KW", "WHILE_KW", "BREAK_KW", "CONTINUE_KW", "RETURN_KW", 
      "IDENT", "DECIMAL_CONST", "OCTAL_CONST", "HEXADECIMAL_CONST", "FloatConst", 
      "CharConst", "STRING", "PLUS", "MINUS", "NOT", "MUL", "DIV", "MOD", 
      "ASSIGN", "EQ", "NEQ", "GT", "LT", "GE", "LE", "AND", "OR", "L_PAREN", 
      "R_PAREN", "L_BRACE", "R_BRACE", "L_BRACKET", "R_BRACKET", "COMMA", 
      "SEMICOLON", "DOUBLE_QUOTE", "WS", "LineComment", "BlockComment"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,46,318,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,1,0,1,0,1,0,1,
  	0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,
  	1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,
  	7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,
  	10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
  	12,1,12,5,12,169,8,12,10,12,12,12,172,9,12,1,13,1,13,5,13,176,8,13,10,
  	13,12,13,179,9,13,1,14,1,14,5,14,183,8,14,10,14,12,14,186,9,14,1,15,1,
  	15,1,15,1,15,3,15,192,8,15,1,15,4,15,195,8,15,11,15,12,15,196,1,16,4,
  	16,200,8,16,11,16,12,16,201,1,16,1,16,4,16,206,8,16,11,16,12,16,207,1,
  	17,1,17,1,17,1,17,1,18,1,18,5,18,216,8,18,10,18,12,18,219,9,18,1,18,1,
  	18,1,19,1,19,3,19,225,8,19,1,20,1,20,1,20,1,20,3,20,231,8,20,1,21,1,21,
  	1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,
  	1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,
  	1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,
  	1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,4,45,288,8,45,
  	11,45,12,45,289,1,45,1,45,1,46,1,46,1,46,1,46,5,46,298,8,46,10,46,12,
  	46,301,9,46,1,46,1,46,1,47,1,47,1,47,1,47,5,47,309,8,47,10,47,12,47,312,
  	9,47,1,47,1,47,1,47,1,47,1,47,2,217,310,0,48,1,1,3,2,5,3,7,4,9,5,11,6,
  	13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
  	37,19,39,0,41,0,43,20,45,21,47,22,49,23,51,24,53,25,55,26,57,27,59,28,
  	61,29,63,30,65,31,67,32,69,33,71,34,73,35,75,36,77,37,79,38,81,39,83,
  	40,85,41,87,42,89,43,91,44,93,45,95,46,1,0,8,3,0,65,90,95,95,97,122,4,
  	0,48,57,65,90,95,95,97,122,1,0,49,57,1,0,48,57,1,0,48,55,3,0,48,57,65,
  	70,97,102,3,0,9,10,13,13,32,32,2,0,10,10,13,13,328,0,1,1,0,0,0,0,3,1,
  	0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
  	15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
  	0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
  	0,0,37,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,
  	51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
  	0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
  	0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,
  	83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,
  	0,0,0,0,95,1,0,0,0,1,97,1,0,0,0,3,103,1,0,0,0,5,107,1,0,0,0,7,114,1,0,
  	0,0,9,119,1,0,0,0,11,125,1,0,0,0,13,130,1,0,0,0,15,133,1,0,0,0,17,138,
  	1,0,0,0,19,144,1,0,0,0,21,150,1,0,0,0,23,159,1,0,0,0,25,166,1,0,0,0,27,
  	173,1,0,0,0,29,180,1,0,0,0,31,191,1,0,0,0,33,199,1,0,0,0,35,209,1,0,0,
  	0,37,213,1,0,0,0,39,224,1,0,0,0,41,230,1,0,0,0,43,232,1,0,0,0,45,234,
  	1,0,0,0,47,236,1,0,0,0,49,238,1,0,0,0,51,240,1,0,0,0,53,242,1,0,0,0,55,
  	244,1,0,0,0,57,246,1,0,0,0,59,249,1,0,0,0,61,252,1,0,0,0,63,254,1,0,0,
  	0,65,256,1,0,0,0,67,259,1,0,0,0,69,262,1,0,0,0,71,265,1,0,0,0,73,268,
  	1,0,0,0,75,270,1,0,0,0,77,272,1,0,0,0,79,274,1,0,0,0,81,276,1,0,0,0,83,
  	278,1,0,0,0,85,280,1,0,0,0,87,282,1,0,0,0,89,284,1,0,0,0,91,287,1,0,0,
  	0,93,293,1,0,0,0,95,304,1,0,0,0,97,98,5,99,0,0,98,99,5,111,0,0,99,100,
  	5,110,0,0,100,101,5,115,0,0,101,102,5,116,0,0,102,2,1,0,0,0,103,104,5,
  	105,0,0,104,105,5,110,0,0,105,106,5,116,0,0,106,4,1,0,0,0,107,108,5,100,
  	0,0,108,109,5,111,0,0,109,110,5,117,0,0,110,111,5,98,0,0,111,112,5,108,
  	0,0,112,113,5,101,0,0,113,6,1,0,0,0,114,115,5,99,0,0,115,116,5,104,0,
  	0,116,117,5,97,0,0,117,118,5,114,0,0,118,8,1,0,0,0,119,120,5,102,0,0,
  	120,121,5,108,0,0,121,122,5,111,0,0,122,123,5,97,0,0,123,124,5,116,0,
  	0,124,10,1,0,0,0,125,126,5,118,0,0,126,127,5,111,0,0,127,128,5,105,0,
  	0,128,129,5,100,0,0,129,12,1,0,0,0,130,131,5,105,0,0,131,132,5,102,0,
  	0,132,14,1,0,0,0,133,134,5,101,0,0,134,135,5,108,0,0,135,136,5,115,0,
  	0,136,137,5,101,0,0,137,16,1,0,0,0,138,139,5,119,0,0,139,140,5,104,0,
  	0,140,141,5,105,0,0,141,142,5,108,0,0,142,143,5,101,0,0,143,18,1,0,0,
  	0,144,145,5,98,0,0,145,146,5,114,0,0,146,147,5,101,0,0,147,148,5,97,0,
  	0,148,149,5,107,0,0,149,20,1,0,0,0,150,151,5,99,0,0,151,152,5,111,0,0,
  	152,153,5,110,0,0,153,154,5,116,0,0,154,155,5,105,0,0,155,156,5,110,0,
  	0,156,157,5,117,0,0,157,158,5,101,0,0,158,22,1,0,0,0,159,160,5,114,0,
  	0,160,161,5,101,0,0,161,162,5,116,0,0,162,163,5,117,0,0,163,164,5,114,
  	0,0,164,165,5,110,0,0,165,24,1,0,0,0,166,170,7,0,0,0,167,169,7,1,0,0,
  	168,167,1,0,0,0,169,172,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,26,
  	1,0,0,0,172,170,1,0,0,0,173,177,7,2,0,0,174,176,7,3,0,0,175,174,1,0,0,
  	0,176,179,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,28,1,0,0,0,179,
  	177,1,0,0,0,180,184,5,48,0,0,181,183,7,4,0,0,182,181,1,0,0,0,183,186,
  	1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,30,1,0,0,0,186,184,1,0,0,
  	0,187,188,5,48,0,0,188,192,5,120,0,0,189,190,5,48,0,0,190,192,5,88,0,
  	0,191,187,1,0,0,0,191,189,1,0,0,0,192,194,1,0,0,0,193,195,7,5,0,0,194,
  	193,1,0,0,0,195,196,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,32,1,
  	0,0,0,198,200,7,3,0,0,199,198,1,0,0,0,200,201,1,0,0,0,201,199,1,0,0,0,
  	201,202,1,0,0,0,202,203,1,0,0,0,203,205,5,46,0,0,204,206,7,3,0,0,205,
  	204,1,0,0,0,206,207,1,0,0,0,207,205,1,0,0,0,207,208,1,0,0,0,208,34,1,
  	0,0,0,209,210,5,39,0,0,210,211,3,39,19,0,211,212,5,39,0,0,212,36,1,0,
  	0,0,213,217,3,89,44,0,214,216,3,39,19,0,215,214,1,0,0,0,216,219,1,0,0,
  	0,217,218,1,0,0,0,217,215,1,0,0,0,218,220,1,0,0,0,219,217,1,0,0,0,220,
  	221,3,89,44,0,221,38,1,0,0,0,222,225,3,41,20,0,223,225,9,0,0,0,224,222,
  	1,0,0,0,224,223,1,0,0,0,225,40,1,0,0,0,226,227,5,92,0,0,227,231,5,34,
  	0,0,228,229,5,92,0,0,229,231,5,92,0,0,230,226,1,0,0,0,230,228,1,0,0,0,
  	231,42,1,0,0,0,232,233,5,43,0,0,233,44,1,0,0,0,234,235,5,45,0,0,235,46,
  	1,0,0,0,236,237,5,33,0,0,237,48,1,0,0,0,238,239,5,42,0,0,239,50,1,0,0,
  	0,240,241,5,47,0,0,241,52,1,0,0,0,242,243,5,37,0,0,243,54,1,0,0,0,244,
  	245,5,61,0,0,245,56,1,0,0,0,246,247,5,61,0,0,247,248,5,61,0,0,248,58,
  	1,0,0,0,249,250,5,33,0,0,250,251,5,61,0,0,251,60,1,0,0,0,252,253,5,62,
  	0,0,253,62,1,0,0,0,254,255,5,60,0,0,255,64,1,0,0,0,256,257,5,62,0,0,257,
  	258,5,61,0,0,258,66,1,0,0,0,259,260,5,60,0,0,260,261,5,61,0,0,261,68,
  	1,0,0,0,262,263,5,38,0,0,263,264,5,38,0,0,264,70,1,0,0,0,265,266,5,124,
  	0,0,266,267,5,124,0,0,267,72,1,0,0,0,268,269,5,40,0,0,269,74,1,0,0,0,
  	270,271,5,41,0,0,271,76,1,0,0,0,272,273,5,123,0,0,273,78,1,0,0,0,274,
  	275,5,125,0,0,275,80,1,0,0,0,276,277,5,91,0,0,277,82,1,0,0,0,278,279,
  	5,93,0,0,279,84,1,0,0,0,280,281,5,44,0,0,281,86,1,0,0,0,282,283,5,59,
  	0,0,283,88,1,0,0,0,284,285,5,34,0,0,285,90,1,0,0,0,286,288,7,6,0,0,287,
  	286,1,0,0,0,288,289,1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,291,1,
  	0,0,0,291,292,6,45,0,0,292,92,1,0,0,0,293,294,5,47,0,0,294,295,5,47,0,
  	0,295,299,1,0,0,0,296,298,8,7,0,0,297,296,1,0,0,0,298,301,1,0,0,0,299,
  	297,1,0,0,0,299,300,1,0,0,0,300,302,1,0,0,0,301,299,1,0,0,0,302,303,6,
  	46,0,0,303,94,1,0,0,0,304,305,5,47,0,0,305,306,5,42,0,0,306,310,1,0,0,
  	0,307,309,9,0,0,0,308,307,1,0,0,0,309,312,1,0,0,0,310,311,1,0,0,0,310,
  	308,1,0,0,0,311,313,1,0,0,0,312,310,1,0,0,0,313,314,5,42,0,0,314,315,
  	5,47,0,0,315,316,1,0,0,0,316,317,6,47,0,0,317,96,1,0,0,0,14,0,170,177,
  	184,191,196,201,207,217,224,230,289,299,310,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cactlexerLexerStaticData = staticData.release();
}

}

CactLexer::CactLexer(CharStream *input) : Lexer(input) {
  CactLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *cactlexerLexerStaticData->atn, cactlexerLexerStaticData->decisionToDFA, cactlexerLexerStaticData->sharedContextCache);
}

CactLexer::~CactLexer() {
  delete _interpreter;
}

std::string CactLexer::getGrammarFileName() const {
  return "Cact.g4";
}

const std::vector<std::string>& CactLexer::getRuleNames() const {
  return cactlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& CactLexer::getChannelNames() const {
  return cactlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& CactLexer::getModeNames() const {
  return cactlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& CactLexer::getVocabulary() const {
  return cactlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CactLexer::getSerializedATN() const {
  return cactlexerLexerStaticData->serializedATN;
}

const atn::ATN& CactLexer::getATN() const {
  return *cactlexerLexerStaticData->atn;
}




void CactLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  cactlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(cactlexerLexerOnceFlag, cactlexerLexerInitialize);
#endif
}
